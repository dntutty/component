apply plugin: 'com.android.application'

println "hello world"

println("hello app")
//username = 123
//正确语法：${rootProject.ext.username}
rootProject.ext.username = 123

println "${username}"


def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //开启分包
        multiDexEnabled true
        //设置分包配置
        //multiDexKeepFile file("multidex-config.txt")

        //将svg图片生成指定维度的png图片
        //vectorDrawables.generatedDensities('xhdpi','xxhdpi')
        //使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        //只保留指定和默认资源
        resConfigs('zh-rCN')

        //配置so库CPU架构(真机:arm，模拟器:x86)
        //x86 x86_64 mips mips64
        ndk {
            abiFilters('armeabi','armeabi-v7a')
            //为了模拟器启动
//            abiFilters('x86','x86_64')
        }

        //源集 - 设置源集的属性，更改源集的Java目录或者自由目录等
        sourceSets {
            main {
                if(!isRelease) {
                    //如果是组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/mian/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                } else {
                    //集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

    }


    //签名配置(隐形坑:必须写在buildTypes之前
    signingConfigs {
        debug {
            //天坑:填错了，编译不通过还找不到问题
            storeFile file('C:/Users/Eric/.android/debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            //签名证书文件
//            storeFile file('')
            //签名证书的类型
//            storeType ""
            //签名证书文件的密码
//            storePassword ""
            //签名证书中该密钥的别名
//            keyAlias ""
            //签名证书中该密钥的密码
//            keyPassword ""
            //是否开启V2打包
//            v2SigningEnabled true
        }
    }


    buildTypes {
        debug {
            //对构建类型设置签名信息
            signingConfig signingConfigs.debug
            buildConfigField("String","debug","\"${url.debug}\"")
        }
        release {
            minifyEnabled false

            buildConfigField("String","debug","\"${url.release}\"")
            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    //AdbOptions 可以对adb操作选项添加配置
    adbOptions {
        //配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0

        //adb install 命令的选项配置
        installOptions '-r','-s'
    }

    //对dx操作的配置，接受一个DexOptions类型的闭包，配置由DexOptions提供
    dexOptions {
        //配置执行dx命令时为其分配的最大堆内存
        javaMaxHeapSize "4g"
        //配置是否预执行dex Libraries 工程，开启后会提高增量构建速度，不过会影响clean构建的速度，默认true
        preDexLibraries = false
        //配置是否开启jumbo模式，代码方法时超过65535需要强制开启才能构建成功
        jumboMode true
        //配置Gradle运行dx命令时使用的线程数量
        threadCount 8
        //配置multidex参数
        additionalParameters = [
                '--multi-dex',//多dex分包
                '--set-max-idx-number=50000',//每个包内方法数上限
                //'--main-dex-list='+'/multidex-config.txt',//打包到主classes.dex的文件列表
                '--minimal-main-dex'
        ]
    }

    //执行gradle lint命令即可运行lint检查，默认生成报告在outputs/lint-results.html中
    lintOptions {
        //遇到lint检查错误会终止构建，一般设置为false
        abortOnError false
        //将警告当作错误来处(老版本:warningAsErros)
        warningsAsErrors false
        //检查新API
        check 'NewApi'
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //标准写法
//    implementation group:"androidx.appcompat" ,name:"appcompat" ,version:"1.0.2"
    //简化写法
//    implementation 'androidx.appcompat:appcompat:1.0.2'


    //依赖library库
    implementation project(":library")
//    implementation support.appcompat
//    implementation support.recyclerview
//    implementation support.constraint

//  最简洁写法
    support.each { k, v -> implementation v }


}
